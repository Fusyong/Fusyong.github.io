<script src="https://cdnjs.cloudflare.com/ajax/libs/require.js/2.1.10/require.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js"></script>
<script>
(function() {
  function addWidgetsRenderer() {
    var mimeElement = document.querySelector('script[type="application/vnd.jupyter.widget-view+json"]');
    var scriptElement = document.createElement('script');
    var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js';
    var widgetState;

    // Fallback for older version:
    try {
      widgetState = mimeElement && JSON.parse(mimeElement.innerHTML);

      if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) {
        widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js';
      }
    } catch(e) {}

    scriptElement.src = widgetRendererSrc;
    document.body.appendChild(scriptElement);
  }

  document.addEventListener('DOMContentLoaded', addWidgetsRenderer);
}());
</script>

<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
 我常用markdown写东西。写比较大的项目时，比如写包含很多章节和栏目一本书，可能要用Python做一些自动处理工作，如给所有儿歌中的难字加标记，统一处理文件里涉及的所有图片，统计分散在各处的某个栏目的情况，等等。这时需要先对markdown文件进行解析，获得元素树（token/element tree），以便处理。下面是两种实现方法，第一种更可靠；而第二种方法，做过爬虫的会比较熟悉。
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
import mistune
from lxml import etree
from IPython.display import display

markdown_data = """
# 标题1-1

TEXT after title1-1
TEXT after title1-2

* title1-1 li1
* title1-1 li2

1. title1-1 li1
1. title1-1 li2

TEXT berfor image ![image](img_url.png) TEXT after image

[GitHub](https://github.com/gera2ld/markmap)

**inline** ~~text~~ *styles*

`inline code`

Katex - $x = {-b \pm \sqrt{b^2-4ac} \over 2a}$

```js
console.log('code block');
```

## title2-1
## title2-2
# title1-2
"""

```

</div>

</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
 # 通过扩展mistune.Renderer获取tokenTree
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python

class TokenTreeRenderer(mistune.Renderer):
    # options is required
    options = {}

    def placeholder(self):
        return []

    def __getattribute__(self, name):
        """Saves the arguments to each Markdown handling method."""
        found = TokenTreeRenderer.__dict__.get(name)
        if found is not None:
            return object.__getattribute__(self, name)

        def fake_method(*args, **kwargs):
            return [(name, args, kwargs)]
        return fake_method

markdown = mistune.Markdown(renderer=TokenTreeRenderer())
tokenTree = markdown(markdown_data) # tokenTree = markdown.render(markdown_data)
display(tokenTree)

```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">

<div class="output_area" markdown="1">


<div class="output_text output_subarea ">
<pre>
<code>[(&#39;header&#39;, ([(&#39;text&#39;, (&#39;标题1-1&#39;,), {})], 1, &#39;标题1-1&#39;), {}),
 (&#39;paragraph&#39;,
  ([(&#39;text&#39;, (&#39;TEXT after title1-1\nTEXT after title1-2&#39;,), {})],),
  {}),
 (&#39;list&#39;,
  ([(&#39;list_item&#39;, ([(&#39;text&#39;, (&#39;title1-1 li1&#39;,), {})],), {}),
    (&#39;list_item&#39;, ([(&#39;text&#39;, (&#39;title1-1 li2&#39;,), {})],), {})],
   False),
  {}),
 (&#39;list&#39;,
  ([(&#39;list_item&#39;, ([(&#39;text&#39;, (&#39;title1-1 li1&#39;,), {})],), {}),
    (&#39;list_item&#39;, ([(&#39;text&#39;, (&#39;title1-1 li2&#39;,), {})],), {})],
   True),
  {}),
 (&#39;paragraph&#39;,
  ([(&#39;text&#39;, (&#39;TEXT berfor image &#39;,), {}),
    (&#39;image&#39;, (&#39;img_url.png&#39;, None, &#39;image&#39;), {}),
    (&#39;text&#39;, (&#39; TEXT after image&#39;,), {})],),
  {}),
 (&#39;paragraph&#39;,
  ([(&#39;link&#39;,
     (&#39;https://github.com/gera2ld/markmap&#39;, None, [(&#39;text&#39;, (&#39;GitHub&#39;,), {})]),
     {})],),
  {}),
 (&#39;paragraph&#39;,
  ([(&#39;double_emphasis&#39;, ([(&#39;text&#39;, (&#39;inline&#39;,), {})],), {}),
    (&#39;text&#39;, (&#39; &#39;,), {}),
    (&#39;strikethrough&#39;, ([(&#39;text&#39;, (&#39;text&#39;,), {})],), {}),
    (&#39;text&#39;, (&#39; &#39;,), {}),
    (&#39;emphasis&#39;, ([(&#39;text&#39;, (&#39;styles&#39;,), {})],), {})],),
  {}),
 (&#39;paragraph&#39;, ([(&#39;codespan&#39;, (&#39;inline code&#39;,), {})],), {}),
 (&#39;paragraph&#39;,
  ([(&#39;text&#39;, (&#39;Katex - $x = {-b &#39;,), {}),
    (&#39;text&#39;, (&#39;\\pm &#39;,), {}),
    (&#39;text&#39;, (&#39;\\sqrt{b^2-4ac} &#39;,), {}),
    (&#39;text&#39;, (&#39;\\over 2a}$&#39;,), {})],),
  {}),
 (&#39;block_code&#39;, (&#34;console.log(&#39;code block&#39;);&#34;, &#39;js&#39;), {}),
 (&#39;header&#39;, ([(&#39;text&#39;, (&#39;title2-1&#39;,), {})], 2, &#39;title2-1&#39;), {}),
 (&#39;header&#39;, ([(&#39;text&#39;, (&#39;title2-2&#39;,), {})], 2, &#39;title2-2&#39;), {}),
 (&#39;header&#39;, ([(&#39;text&#39;, (&#39;title1-2&#39;,), {})], 1, &#39;title1-2&#39;), {})]</code>
</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
 # 或通过lxml获取元素树
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
# html = mistune.markdown(markdown_data)
markdown = mistune.Markdown()
html = markdown(markdown_data)
print(html)

```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">

<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre>
<code>&lt;h1&gt;标题1-1&lt;/h1&gt;
&lt;p&gt;TEXT after title1-1
TEXT after title1-2&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;title1-1 li1&lt;/li&gt;
&lt;li&gt;title1-1 li2&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;title1-1 li1&lt;/li&gt;
&lt;li&gt;title1-1 li2&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;TEXT berfor image &lt;img src=&#34;img_url.png&#34; alt=&#34;image&#34;&gt; TEXT after image&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/gera2ld/markmap&#34;&gt;GitHub&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;inline&lt;/strong&gt; &lt;del&gt;text&lt;/del&gt; &lt;em&gt;styles&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;inline code&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Katex - $x = {-b \pm \sqrt{b^2-4ac} \over 2a}$&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;lang-js&#34;&gt;console.log(&amp;#39;code block&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;title2-1&lt;/h2&gt;
&lt;h2&gt;title2-2&lt;/h2&gt;
&lt;h1&gt;title1-2&lt;/h1&gt;

</code>
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
# 元素树
root = etree.HTML(html)
print(root)

```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">

<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre>
<code>&lt;Element html at 0x1c6dacc29c0&gt;
</code>
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
# 元素.标签
l = [x.tag for x in root[0]]
print(l)

```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">

<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre>
<code>[&#39;h1&#39;, &#39;p&#39;, &#39;ul&#39;, &#39;ol&#39;, &#39;p&#39;, &#39;p&#39;, &#39;p&#39;, &#39;p&#39;, &#39;p&#39;, &#39;pre&#39;, &#39;h2&#39;, &#39;h2&#39;, &#39;h1&#39;]
</code>
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
# 元素.文本
print(root[0][1].text)

```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">

<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre>
<code>TEXT after title1-1
TEXT after title1-2
</code>
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
# 转字符串
print(etree.tostring(root, encoding='utf-8'))
print(etree.tostring(root, method="text", encoding='utf-8', pretty_print=True))

```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">

<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre>
<code>b&#39;&lt;html&gt;&lt;body&gt;&lt;h1&gt;\xe6\xa0\x87\xe9\xa2\x981-1&lt;/h1&gt;\n&lt;p&gt;TEXT after title1-1\nTEXT after title1-2&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;title1-1 li1&lt;/li&gt;\n&lt;li&gt;title1-1 li2&lt;/li&gt;\n&lt;/ul&gt;\n&lt;ol&gt;\n&lt;li&gt;title1-1 li1&lt;/li&gt;\n&lt;li&gt;title1-1 li2&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;TEXT berfor image &lt;img src=&#34;img_url.png&#34; alt=&#34;image&#34;/&gt; TEXT after image&lt;/p&gt;\n&lt;p&gt;&lt;a href=&#34;https://github.com/gera2ld/markmap&#34;&gt;GitHub&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;inline&lt;/strong&gt; &lt;del&gt;text&lt;/del&gt; &lt;em&gt;styles&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;inline code&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;Katex - $x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}$&lt;/p&gt;\n&lt;pre&gt;&lt;code class=&#34;lang-js&#34;&gt;console.log(\&#39;code block\&#39;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;title2-1&lt;/h2&gt;\n&lt;h2&gt;title2-2&lt;/h2&gt;\n&lt;h1&gt;title1-2&lt;/h1&gt;\n&lt;/body&gt;&lt;/html&gt;&#39;
b&#34;\xe6\xa0\x87\xe9\xa2\x981-1\nTEXT after title1-1\nTEXT after title1-2\n\ntitle1-1 li1\ntitle1-1 li2\n\n\ntitle1-1 li1\ntitle1-1 li2\n\nTEXT berfor image  TEXT after image\nGitHub\ninline text styles\ninline code\nKatex - $x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}$\nconsole.log(&#39;code block&#39;);\n\ntitle2-1\ntitle2-2\ntitle1-2\n&#34;
</code>
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
# 用xpath查找元素
display(root.xpath("string()")) # 文本 # lxml.etree only!
display(root.xpath("//text()")) # 文本列表 # lxml.etree only!

# 同上
build_text_list = etree.XPath("//text()")
path = build_text_list(root)
print(path)

```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">

<div class="output_area" markdown="1">


<div class="output_text output_subarea ">
<pre>
<code>&#34;标题1-1\nTEXT after title1-1\nTEXT after title1-2\n\ntitle1-1 li1\ntitle1-1 li2\n\n\ntitle1-1 li1\ntitle1-1 li2\n\nTEXT berfor image  TEXT after image\nGitHub\ninline text styles\ninline code\nKatex - $x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}$\nconsole.log(&#39;code block&#39;);\n\ntitle2-1\ntitle2-2\ntitle1-2\n&#34;</code>
</pre>
</div>

</div>

<div class="output_area" markdown="1">


<div class="output_text output_subarea ">
<pre>
<code>[&#39;标题1-1&#39;,
 &#39;\n&#39;,
 &#39;TEXT after title1-1\nTEXT after title1-2&#39;,
 &#39;\n&#39;,
 &#39;\n&#39;,
 &#39;title1-1 li1&#39;,
 &#39;\n&#39;,
 &#39;title1-1 li2&#39;,
 &#39;\n&#39;,
 &#39;\n&#39;,
 &#39;\n&#39;,
 &#39;title1-1 li1&#39;,
 &#39;\n&#39;,
 &#39;title1-1 li2&#39;,
 &#39;\n&#39;,
 &#39;\n&#39;,
 &#39;TEXT berfor image &#39;,
 &#39; TEXT after image&#39;,
 &#39;\n&#39;,
 &#39;GitHub&#39;,
 &#39;\n&#39;,
 &#39;inline&#39;,
 &#39; &#39;,
 &#39;text&#39;,
 &#39; &#39;,
 &#39;styles&#39;,
 &#39;\n&#39;,
 &#39;inline code&#39;,
 &#39;\n&#39;,
 &#39;Katex - $x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}$&#39;,
 &#39;\n&#39;,
 &#34;console.log(&#39;code block&#39;);\n&#34;,
 &#39;\n&#39;,
 &#39;title2-1&#39;,
 &#39;\n&#39;,
 &#39;title2-2&#39;,
 &#39;\n&#39;,
 &#39;title1-2&#39;,
 &#39;\n&#39;]</code>
</pre>
</div>

</div>

<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre>
<code>[&#39;标题1-1&#39;, &#39;\n&#39;, &#39;TEXT after title1-1\nTEXT after title1-2&#39;, &#39;\n&#39;, &#39;\n&#39;, &#39;title1-1 li1&#39;, &#39;\n&#39;, &#39;title1-1 li2&#39;, &#39;\n&#39;, &#39;\n&#39;, &#39;\n&#39;, &#39;title1-1 li1&#39;, &#39;\n&#39;, &#39;title1-1 li2&#39;, &#39;\n&#39;, &#39;\n&#39;, &#39;TEXT berfor image &#39;, &#39; TEXT after image&#39;, &#39;\n&#39;, &#39;GitHub&#39;, &#39;\n&#39;, &#39;inline&#39;, &#39; &#39;, &#39;text&#39;, &#39; &#39;, &#39;styles&#39;, &#39;\n&#39;, &#39;inline code&#39;, &#39;\n&#39;, &#39;Katex - $x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}$&#39;, &#39;\n&#39;, &#34;console.log(&#39;code block&#39;);\n&#34;, &#39;\n&#39;, &#39;title2-1&#39;, &#39;\n&#39;, &#39;title2-2&#39;, &#39;\n&#39;, &#39;title1-2&#39;, &#39;\n&#39;]
</code>
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
# 取父
print(path[0])
print(path[0].getparent().tag)

print(path[0].is_text) # 是否文本
print(path[1].is_text)
print(path[1].is_tail) # 是否尾巴？？

```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">

<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre>
<code>标题1-1
h1
True
False
True
</code>
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
# 树的迭代
for e in root.iter():
    print(f"{e.tag} - {e.text}")

```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">

<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre>
<code>html - None
body - None
h1 - 标题1-1
p - TEXT after title1-1
TEXT after title1-2
ul - 

li - title1-1 li1
li - title1-1 li2
ol - 

li - title1-1 li1
li - title1-1 li2
p - TEXT berfor image 
img - None
p - None
a - GitHub
p - None
strong - inline
del - text
em - styles
p - None
code - inline code
p - Katex - $x = {-b \pm \sqrt{b^2-4ac} \over 2a}$
pre - None
code - console.log(&#39;code block&#39;);

h2 - title2-1
h2 - title2-2
h1 - title1-2
</code>
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
# 树的过滤
for e in root.iter("h1"):
    print(f"{e.tag} - {e.text}")

```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">

<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre>
<code>h1 - 标题1-1
h1 - title1-2
</code>
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
# 树的过滤，或关系
for e in root.iter("h1", "p"):
    print(f"{e.tag} - {e.text}")

```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">

<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre>
<code>h1 - 标题1-1
p - TEXT after title1-1
TEXT after title1-2
p - TEXT berfor image 
p - None
p - None
p - None
p - Katex - $x = {-b \pm \sqrt{b^2-4ac} \over 2a}$
h1 - title1-2
</code>
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
# 寻找子元素

print(root.find("h2")) # 寻找一级元素，find()找不到时返回None，其他方法会报错
print(root.find(".//h2")) # 在任意一级寻找元素
print(root.find(".//h2")) # 在任意一级寻找元素
print([ b for b in root.iterfind(".//h2") ]) # 迭代查找
print(root.findall(".//h2"))  # 查找全部
print(root.findall(".//h1[@x]")) # 带属性查找


```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">

<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre>
<code>None
&lt;Element h2 at 0x1c6dae19380&gt;
&lt;Element h2 at 0x1c6dae19380&gt;
[&lt;Element h2 at 0x1c6dae19380&gt;, &lt;Element h2 at 0x1c6dae193c0&gt;]
[&lt;Element h2 at 0x1c6dae19380&gt;, &lt;Element h2 at 0x1c6dae193c0&gt;]
[]
</code>
</pre>
</div>
</div>

</div>
</div>

</div>


